// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "headscale/v1/policy.proto" (package "headscale.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp";
/**
 * @generated from protobuf message headscale.v1.SetPolicyRequest
 */
export interface SetPolicyRequest {
    /**
     * @generated from protobuf field: string policy = 1;
     */
    policy: string;
}
/**
 * @generated from protobuf message headscale.v1.SetPolicyResponse
 */
export interface SetPolicyResponse {
    /**
     * @generated from protobuf field: string policy = 1;
     */
    policy: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 2;
     */
    updatedAt?: Timestamp;
}
/**
 * @generated from protobuf message headscale.v1.GetPolicyRequest
 */
export interface GetPolicyRequest {
}
/**
 * @generated from protobuf message headscale.v1.GetPolicyResponse
 */
export interface GetPolicyResponse {
    /**
     * @generated from protobuf field: string policy = 1;
     */
    policy: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 2;
     */
    updatedAt?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class SetPolicyRequest$Type extends MessageType<SetPolicyRequest> {
    constructor() {
        super("headscale.v1.SetPolicyRequest", [
            { no: 1, name: "policy", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetPolicyRequest>): SetPolicyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.policy = "";
        if (value !== undefined)
            reflectionMergePartial<SetPolicyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPolicyRequest): SetPolicyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string policy */ 1:
                    message.policy = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPolicyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string policy = 1; */
        if (message.policy !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.policy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.SetPolicyRequest
 */
export const SetPolicyRequest = new SetPolicyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPolicyResponse$Type extends MessageType<SetPolicyResponse> {
    constructor() {
        super("headscale.v1.SetPolicyResponse", [
            { no: 1, name: "policy", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "updated_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<SetPolicyResponse>): SetPolicyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.policy = "";
        if (value !== undefined)
            reflectionMergePartial<SetPolicyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPolicyResponse): SetPolicyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string policy */ 1:
                    message.policy = reader.string();
                    break;
                case /* google.protobuf.Timestamp updated_at */ 2:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPolicyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string policy = 1; */
        if (message.policy !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.policy);
        /* google.protobuf.Timestamp updated_at = 2; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.SetPolicyResponse
 */
export const SetPolicyResponse = new SetPolicyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPolicyRequest$Type extends MessageType<GetPolicyRequest> {
    constructor() {
        super("headscale.v1.GetPolicyRequest", []);
    }
    create(value?: PartialMessage<GetPolicyRequest>): GetPolicyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPolicyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPolicyRequest): GetPolicyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPolicyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.GetPolicyRequest
 */
export const GetPolicyRequest = new GetPolicyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPolicyResponse$Type extends MessageType<GetPolicyResponse> {
    constructor() {
        super("headscale.v1.GetPolicyResponse", [
            { no: 1, name: "policy", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "updated_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<GetPolicyResponse>): GetPolicyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.policy = "";
        if (value !== undefined)
            reflectionMergePartial<GetPolicyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPolicyResponse): GetPolicyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string policy */ 1:
                    message.policy = reader.string();
                    break;
                case /* google.protobuf.Timestamp updated_at */ 2:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPolicyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string policy = 1; */
        if (message.policy !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.policy);
        /* google.protobuf.Timestamp updated_at = 2; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.GetPolicyResponse
 */
export const GetPolicyResponse = new GetPolicyResponse$Type();
