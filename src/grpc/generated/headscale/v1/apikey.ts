// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "headscale/v1/apikey.proto" (package "headscale.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp";
/**
 * @generated from protobuf message headscale.v1.ApiKey
 */
export interface ApiKey {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string prefix = 2;
     */
    prefix: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expiration = 3;
     */
    expiration?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 4;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp last_seen = 5;
     */
    lastSeen?: Timestamp;
}
/**
 * @generated from protobuf message headscale.v1.CreateApiKeyRequest
 */
export interface CreateApiKeyRequest {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expiration = 1;
     */
    expiration?: Timestamp;
}
/**
 * @generated from protobuf message headscale.v1.CreateApiKeyResponse
 */
export interface CreateApiKeyResponse {
    /**
     * @generated from protobuf field: string api_key = 1;
     */
    apiKey: string;
}
/**
 * @generated from protobuf message headscale.v1.ExpireApiKeyRequest
 */
export interface ExpireApiKeyRequest {
    /**
     * @generated from protobuf field: string prefix = 1;
     */
    prefix: string;
}
/**
 * @generated from protobuf message headscale.v1.ExpireApiKeyResponse
 */
export interface ExpireApiKeyResponse {
}
/**
 * @generated from protobuf message headscale.v1.ListApiKeysRequest
 */
export interface ListApiKeysRequest {
}
/**
 * @generated from protobuf message headscale.v1.ListApiKeysResponse
 */
export interface ListApiKeysResponse {
    /**
     * @generated from protobuf field: repeated headscale.v1.ApiKey api_keys = 1;
     */
    apiKeys: ApiKey[];
}
/**
 * @generated from protobuf message headscale.v1.DeleteApiKeyRequest
 */
export interface DeleteApiKeyRequest {
    /**
     * @generated from protobuf field: string prefix = 1;
     */
    prefix: string;
}
/**
 * @generated from protobuf message headscale.v1.DeleteApiKeyResponse
 */
export interface DeleteApiKeyResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class ApiKey$Type extends MessageType<ApiKey> {
    constructor() {
        super("headscale.v1.ApiKey", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expiration", kind: "message", T: () => Timestamp },
            { no: 4, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "last_seen", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<ApiKey>): ApiKey {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.prefix = "";
        if (value !== undefined)
            reflectionMergePartial<ApiKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApiKey): ApiKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string prefix */ 2:
                    message.prefix = reader.string();
                    break;
                case /* google.protobuf.Timestamp expiration */ 3:
                    message.expiration = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiration);
                    break;
                case /* google.protobuf.Timestamp created_at */ 4:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp last_seen */ 5:
                    message.lastSeen = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastSeen);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApiKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string prefix = 2; */
        if (message.prefix !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.prefix);
        /* google.protobuf.Timestamp expiration = 3; */
        if (message.expiration)
            Timestamp.internalBinaryWrite(message.expiration, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp created_at = 4; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp last_seen = 5; */
        if (message.lastSeen)
            Timestamp.internalBinaryWrite(message.lastSeen, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.ApiKey
 */
export const ApiKey = new ApiKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateApiKeyRequest$Type extends MessageType<CreateApiKeyRequest> {
    constructor() {
        super("headscale.v1.CreateApiKeyRequest", [
            { no: 1, name: "expiration", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<CreateApiKeyRequest>): CreateApiKeyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateApiKeyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateApiKeyRequest): CreateApiKeyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp expiration */ 1:
                    message.expiration = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateApiKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp expiration = 1; */
        if (message.expiration)
            Timestamp.internalBinaryWrite(message.expiration, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.CreateApiKeyRequest
 */
export const CreateApiKeyRequest = new CreateApiKeyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateApiKeyResponse$Type extends MessageType<CreateApiKeyResponse> {
    constructor() {
        super("headscale.v1.CreateApiKeyResponse", [
            { no: 1, name: "api_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateApiKeyResponse>): CreateApiKeyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.apiKey = "";
        if (value !== undefined)
            reflectionMergePartial<CreateApiKeyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateApiKeyResponse): CreateApiKeyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string api_key */ 1:
                    message.apiKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateApiKeyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string api_key = 1; */
        if (message.apiKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.apiKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.CreateApiKeyResponse
 */
export const CreateApiKeyResponse = new CreateApiKeyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpireApiKeyRequest$Type extends MessageType<ExpireApiKeyRequest> {
    constructor() {
        super("headscale.v1.ExpireApiKeyRequest", [
            { no: 1, name: "prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ExpireApiKeyRequest>): ExpireApiKeyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.prefix = "";
        if (value !== undefined)
            reflectionMergePartial<ExpireApiKeyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpireApiKeyRequest): ExpireApiKeyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string prefix */ 1:
                    message.prefix = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpireApiKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string prefix = 1; */
        if (message.prefix !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.prefix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.ExpireApiKeyRequest
 */
export const ExpireApiKeyRequest = new ExpireApiKeyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpireApiKeyResponse$Type extends MessageType<ExpireApiKeyResponse> {
    constructor() {
        super("headscale.v1.ExpireApiKeyResponse", []);
    }
    create(value?: PartialMessage<ExpireApiKeyResponse>): ExpireApiKeyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExpireApiKeyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpireApiKeyResponse): ExpireApiKeyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpireApiKeyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.ExpireApiKeyResponse
 */
export const ExpireApiKeyResponse = new ExpireApiKeyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListApiKeysRequest$Type extends MessageType<ListApiKeysRequest> {
    constructor() {
        super("headscale.v1.ListApiKeysRequest", []);
    }
    create(value?: PartialMessage<ListApiKeysRequest>): ListApiKeysRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListApiKeysRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListApiKeysRequest): ListApiKeysRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListApiKeysRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.ListApiKeysRequest
 */
export const ListApiKeysRequest = new ListApiKeysRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListApiKeysResponse$Type extends MessageType<ListApiKeysResponse> {
    constructor() {
        super("headscale.v1.ListApiKeysResponse", [
            { no: 1, name: "api_keys", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ApiKey }
        ]);
    }
    create(value?: PartialMessage<ListApiKeysResponse>): ListApiKeysResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.apiKeys = [];
        if (value !== undefined)
            reflectionMergePartial<ListApiKeysResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListApiKeysResponse): ListApiKeysResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated headscale.v1.ApiKey api_keys */ 1:
                    message.apiKeys.push(ApiKey.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListApiKeysResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated headscale.v1.ApiKey api_keys = 1; */
        for (let i = 0; i < message.apiKeys.length; i++)
            ApiKey.internalBinaryWrite(message.apiKeys[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.ListApiKeysResponse
 */
export const ListApiKeysResponse = new ListApiKeysResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteApiKeyRequest$Type extends MessageType<DeleteApiKeyRequest> {
    constructor() {
        super("headscale.v1.DeleteApiKeyRequest", [
            { no: 1, name: "prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteApiKeyRequest>): DeleteApiKeyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.prefix = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteApiKeyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteApiKeyRequest): DeleteApiKeyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string prefix */ 1:
                    message.prefix = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteApiKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string prefix = 1; */
        if (message.prefix !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.prefix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.DeleteApiKeyRequest
 */
export const DeleteApiKeyRequest = new DeleteApiKeyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteApiKeyResponse$Type extends MessageType<DeleteApiKeyResponse> {
    constructor() {
        super("headscale.v1.DeleteApiKeyResponse", []);
    }
    create(value?: PartialMessage<DeleteApiKeyResponse>): DeleteApiKeyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteApiKeyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteApiKeyResponse): DeleteApiKeyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteApiKeyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.DeleteApiKeyResponse
 */
export const DeleteApiKeyResponse = new DeleteApiKeyResponse$Type();
