// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "headscale/v1/routes.proto" (package "headscale.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Node } from "./node";
/**
 * @generated from protobuf message headscale.v1.Route
 */
export interface Route {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: headscale.v1.Node node = 2;
     */
    node?: Node;
    /**
     * @generated from protobuf field: string prefix = 3;
     */
    prefix: string;
    /**
     * @generated from protobuf field: bool advertised = 4;
     */
    advertised: boolean;
    /**
     * @generated from protobuf field: bool enabled = 5;
     */
    enabled: boolean;
    /**
     * @generated from protobuf field: bool is_primary = 6;
     */
    isPrimary: boolean;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 7;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 8;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp deleted_at = 9;
     */
    deletedAt?: Timestamp;
}
/**
 * @generated from protobuf message headscale.v1.GetRoutesRequest
 */
export interface GetRoutesRequest {
}
/**
 * @generated from protobuf message headscale.v1.GetRoutesResponse
 */
export interface GetRoutesResponse {
    /**
     * @generated from protobuf field: repeated headscale.v1.Route routes = 1;
     */
    routes: Route[];
}
/**
 * @generated from protobuf message headscale.v1.EnableRouteRequest
 */
export interface EnableRouteRequest {
    /**
     * @generated from protobuf field: uint64 route_id = 1;
     */
    routeId: bigint;
}
/**
 * @generated from protobuf message headscale.v1.EnableRouteResponse
 */
export interface EnableRouteResponse {
}
/**
 * @generated from protobuf message headscale.v1.DisableRouteRequest
 */
export interface DisableRouteRequest {
    /**
     * @generated from protobuf field: uint64 route_id = 1;
     */
    routeId: bigint;
}
/**
 * @generated from protobuf message headscale.v1.DisableRouteResponse
 */
export interface DisableRouteResponse {
}
/**
 * @generated from protobuf message headscale.v1.GetNodeRoutesRequest
 */
export interface GetNodeRoutesRequest {
    /**
     * @generated from protobuf field: uint64 node_id = 1;
     */
    nodeId: bigint;
}
/**
 * @generated from protobuf message headscale.v1.GetNodeRoutesResponse
 */
export interface GetNodeRoutesResponse {
    /**
     * @generated from protobuf field: repeated headscale.v1.Route routes = 1;
     */
    routes: Route[];
}
/**
 * @generated from protobuf message headscale.v1.DeleteRouteRequest
 */
export interface DeleteRouteRequest {
    /**
     * @generated from protobuf field: uint64 route_id = 1;
     */
    routeId: bigint;
}
/**
 * @generated from protobuf message headscale.v1.DeleteRouteResponse
 */
export interface DeleteRouteResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class Route$Type extends MessageType<Route> {
    constructor() {
        super("headscale.v1.Route", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "node", kind: "message", T: () => Node },
            { no: 3, name: "prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "advertised", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "is_primary", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 8, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 9, name: "deleted_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Route>): Route {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.prefix = "";
        message.advertised = false;
        message.enabled = false;
        message.isPrimary = false;
        if (value !== undefined)
            reflectionMergePartial<Route>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Route): Route {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* headscale.v1.Node node */ 2:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                case /* string prefix */ 3:
                    message.prefix = reader.string();
                    break;
                case /* bool advertised */ 4:
                    message.advertised = reader.bool();
                    break;
                case /* bool enabled */ 5:
                    message.enabled = reader.bool();
                    break;
                case /* bool is_primary */ 6:
                    message.isPrimary = reader.bool();
                    break;
                case /* google.protobuf.Timestamp created_at */ 7:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 8:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* google.protobuf.Timestamp deleted_at */ 9:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Route, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* headscale.v1.Node node = 2; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string prefix = 3; */
        if (message.prefix !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.prefix);
        /* bool advertised = 4; */
        if (message.advertised !== false)
            writer.tag(4, WireType.Varint).bool(message.advertised);
        /* bool enabled = 5; */
        if (message.enabled !== false)
            writer.tag(5, WireType.Varint).bool(message.enabled);
        /* bool is_primary = 6; */
        if (message.isPrimary !== false)
            writer.tag(6, WireType.Varint).bool(message.isPrimary);
        /* google.protobuf.Timestamp created_at = 7; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 8; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp deleted_at = 9; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.Route
 */
export const Route = new Route$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRoutesRequest$Type extends MessageType<GetRoutesRequest> {
    constructor() {
        super("headscale.v1.GetRoutesRequest", []);
    }
    create(value?: PartialMessage<GetRoutesRequest>): GetRoutesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetRoutesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRoutesRequest): GetRoutesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRoutesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.GetRoutesRequest
 */
export const GetRoutesRequest = new GetRoutesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRoutesResponse$Type extends MessageType<GetRoutesResponse> {
    constructor() {
        super("headscale.v1.GetRoutesResponse", [
            { no: 1, name: "routes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Route }
        ]);
    }
    create(value?: PartialMessage<GetRoutesResponse>): GetRoutesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.routes = [];
        if (value !== undefined)
            reflectionMergePartial<GetRoutesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRoutesResponse): GetRoutesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated headscale.v1.Route routes */ 1:
                    message.routes.push(Route.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRoutesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated headscale.v1.Route routes = 1; */
        for (let i = 0; i < message.routes.length; i++)
            Route.internalBinaryWrite(message.routes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.GetRoutesResponse
 */
export const GetRoutesResponse = new GetRoutesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnableRouteRequest$Type extends MessageType<EnableRouteRequest> {
    constructor() {
        super("headscale.v1.EnableRouteRequest", [
            { no: 1, name: "route_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EnableRouteRequest>): EnableRouteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.routeId = 0n;
        if (value !== undefined)
            reflectionMergePartial<EnableRouteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnableRouteRequest): EnableRouteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 route_id */ 1:
                    message.routeId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnableRouteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 route_id = 1; */
        if (message.routeId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.routeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.EnableRouteRequest
 */
export const EnableRouteRequest = new EnableRouteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnableRouteResponse$Type extends MessageType<EnableRouteResponse> {
    constructor() {
        super("headscale.v1.EnableRouteResponse", []);
    }
    create(value?: PartialMessage<EnableRouteResponse>): EnableRouteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EnableRouteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnableRouteResponse): EnableRouteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnableRouteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.EnableRouteResponse
 */
export const EnableRouteResponse = new EnableRouteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisableRouteRequest$Type extends MessageType<DisableRouteRequest> {
    constructor() {
        super("headscale.v1.DisableRouteRequest", [
            { no: 1, name: "route_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DisableRouteRequest>): DisableRouteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.routeId = 0n;
        if (value !== undefined)
            reflectionMergePartial<DisableRouteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisableRouteRequest): DisableRouteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 route_id */ 1:
                    message.routeId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DisableRouteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 route_id = 1; */
        if (message.routeId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.routeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.DisableRouteRequest
 */
export const DisableRouteRequest = new DisableRouteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisableRouteResponse$Type extends MessageType<DisableRouteResponse> {
    constructor() {
        super("headscale.v1.DisableRouteResponse", []);
    }
    create(value?: PartialMessage<DisableRouteResponse>): DisableRouteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DisableRouteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisableRouteResponse): DisableRouteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DisableRouteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.DisableRouteResponse
 */
export const DisableRouteResponse = new DisableRouteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNodeRoutesRequest$Type extends MessageType<GetNodeRoutesRequest> {
    constructor() {
        super("headscale.v1.GetNodeRoutesRequest", [
            { no: 1, name: "node_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetNodeRoutesRequest>): GetNodeRoutesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nodeId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetNodeRoutesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNodeRoutesRequest): GetNodeRoutesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 node_id */ 1:
                    message.nodeId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNodeRoutesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 node_id = 1; */
        if (message.nodeId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.nodeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.GetNodeRoutesRequest
 */
export const GetNodeRoutesRequest = new GetNodeRoutesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNodeRoutesResponse$Type extends MessageType<GetNodeRoutesResponse> {
    constructor() {
        super("headscale.v1.GetNodeRoutesResponse", [
            { no: 1, name: "routes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Route }
        ]);
    }
    create(value?: PartialMessage<GetNodeRoutesResponse>): GetNodeRoutesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.routes = [];
        if (value !== undefined)
            reflectionMergePartial<GetNodeRoutesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNodeRoutesResponse): GetNodeRoutesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated headscale.v1.Route routes */ 1:
                    message.routes.push(Route.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNodeRoutesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated headscale.v1.Route routes = 1; */
        for (let i = 0; i < message.routes.length; i++)
            Route.internalBinaryWrite(message.routes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.GetNodeRoutesResponse
 */
export const GetNodeRoutesResponse = new GetNodeRoutesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRouteRequest$Type extends MessageType<DeleteRouteRequest> {
    constructor() {
        super("headscale.v1.DeleteRouteRequest", [
            { no: 1, name: "route_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteRouteRequest>): DeleteRouteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.routeId = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeleteRouteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRouteRequest): DeleteRouteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 route_id */ 1:
                    message.routeId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRouteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 route_id = 1; */
        if (message.routeId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.routeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.DeleteRouteRequest
 */
export const DeleteRouteRequest = new DeleteRouteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRouteResponse$Type extends MessageType<DeleteRouteResponse> {
    constructor() {
        super("headscale.v1.DeleteRouteResponse", []);
    }
    create(value?: PartialMessage<DeleteRouteResponse>): DeleteRouteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteRouteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRouteResponse): DeleteRouteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRouteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.DeleteRouteResponse
 */
export const DeleteRouteResponse = new DeleteRouteResponse$Type();
