// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "headscale/v1/headscale.proto" (package "headscale.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { HeadscaleService } from "./headscale";
import type { SetPolicyResponse } from "./policy";
import type { SetPolicyRequest } from "./policy";
import type { GetPolicyResponse } from "./policy";
import type { GetPolicyRequest } from "./policy";
import type { DeleteApiKeyResponse } from "./apikey";
import type { DeleteApiKeyRequest } from "./apikey";
import type { ListApiKeysResponse } from "./apikey";
import type { ListApiKeysRequest } from "./apikey";
import type { ExpireApiKeyResponse } from "./apikey";
import type { ExpireApiKeyRequest } from "./apikey";
import type { CreateApiKeyResponse } from "./apikey";
import type { CreateApiKeyRequest } from "./apikey";
import type { DeleteRouteResponse } from "./routes";
import type { DeleteRouteRequest } from "./routes";
import type { GetNodeRoutesResponse } from "./routes";
import type { GetNodeRoutesRequest } from "./routes";
import type { DisableRouteResponse } from "./routes";
import type { DisableRouteRequest } from "./routes";
import type { EnableRouteResponse } from "./routes";
import type { EnableRouteRequest } from "./routes";
import type { GetRoutesResponse } from "./routes";
import type { GetRoutesRequest } from "./routes";
import type { BackfillNodeIPsResponse } from "./node";
import type { BackfillNodeIPsRequest } from "./node";
import type { MoveNodeResponse } from "./node";
import type { MoveNodeRequest } from "./node";
import type { ListNodesResponse } from "./node";
import type { ListNodesRequest } from "./node";
import type { RenameNodeResponse } from "./node";
import type { RenameNodeRequest } from "./node";
import type { ExpireNodeResponse } from "./node";
import type { ExpireNodeRequest } from "./node";
import type { DeleteNodeResponse } from "./node";
import type { DeleteNodeRequest } from "./node";
import type { RegisterNodeResponse } from "./node";
import type { RegisterNodeRequest } from "./node";
import type { SetTagsResponse } from "./node";
import type { SetTagsRequest } from "./node";
import type { GetNodeResponse } from "./node";
import type { GetNodeRequest } from "./node";
import type { DebugCreateNodeResponse } from "./node";
import type { DebugCreateNodeRequest } from "./node";
import type { ListPreAuthKeysResponse } from "./preauthkey";
import type { ListPreAuthKeysRequest } from "./preauthkey";
import type { ExpirePreAuthKeyResponse } from "./preauthkey";
import type { ExpirePreAuthKeyRequest } from "./preauthkey";
import type { CreatePreAuthKeyResponse } from "./preauthkey";
import type { CreatePreAuthKeyRequest } from "./preauthkey";
import type { ListUsersResponse } from "./user";
import type { ListUsersRequest } from "./user";
import type { DeleteUserResponse } from "./user";
import type { DeleteUserRequest } from "./user";
import type { RenameUserResponse } from "./user";
import type { RenameUserRequest } from "./user";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateUserResponse } from "./user";
import type { CreateUserRequest } from "./user";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service headscale.v1.HeadscaleService
 */
export interface IHeadscaleServiceClient {
    /**
     * --- User start ---
     *
     * @generated from protobuf rpc: CreateUser(headscale.v1.CreateUserRequest) returns (headscale.v1.CreateUserResponse);
     */
    createUser(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, CreateUserResponse>;
    /**
     * @generated from protobuf rpc: RenameUser(headscale.v1.RenameUserRequest) returns (headscale.v1.RenameUserResponse);
     */
    renameUser(input: RenameUserRequest, options?: RpcOptions): UnaryCall<RenameUserRequest, RenameUserResponse>;
    /**
     * @generated from protobuf rpc: DeleteUser(headscale.v1.DeleteUserRequest) returns (headscale.v1.DeleteUserResponse);
     */
    deleteUser(input: DeleteUserRequest, options?: RpcOptions): UnaryCall<DeleteUserRequest, DeleteUserResponse>;
    /**
     * @generated from protobuf rpc: ListUsers(headscale.v1.ListUsersRequest) returns (headscale.v1.ListUsersResponse);
     */
    listUsers(input: ListUsersRequest, options?: RpcOptions): UnaryCall<ListUsersRequest, ListUsersResponse>;
    /**
     * --- PreAuthKeys start ---
     *
     * @generated from protobuf rpc: CreatePreAuthKey(headscale.v1.CreatePreAuthKeyRequest) returns (headscale.v1.CreatePreAuthKeyResponse);
     */
    createPreAuthKey(input: CreatePreAuthKeyRequest, options?: RpcOptions): UnaryCall<CreatePreAuthKeyRequest, CreatePreAuthKeyResponse>;
    /**
     * @generated from protobuf rpc: ExpirePreAuthKey(headscale.v1.ExpirePreAuthKeyRequest) returns (headscale.v1.ExpirePreAuthKeyResponse);
     */
    expirePreAuthKey(input: ExpirePreAuthKeyRequest, options?: RpcOptions): UnaryCall<ExpirePreAuthKeyRequest, ExpirePreAuthKeyResponse>;
    /**
     * @generated from protobuf rpc: ListPreAuthKeys(headscale.v1.ListPreAuthKeysRequest) returns (headscale.v1.ListPreAuthKeysResponse);
     */
    listPreAuthKeys(input: ListPreAuthKeysRequest, options?: RpcOptions): UnaryCall<ListPreAuthKeysRequest, ListPreAuthKeysResponse>;
    /**
     * --- Node start ---
     *
     * @generated from protobuf rpc: DebugCreateNode(headscale.v1.DebugCreateNodeRequest) returns (headscale.v1.DebugCreateNodeResponse);
     */
    debugCreateNode(input: DebugCreateNodeRequest, options?: RpcOptions): UnaryCall<DebugCreateNodeRequest, DebugCreateNodeResponse>;
    /**
     * @generated from protobuf rpc: GetNode(headscale.v1.GetNodeRequest) returns (headscale.v1.GetNodeResponse);
     */
    getNode(input: GetNodeRequest, options?: RpcOptions): UnaryCall<GetNodeRequest, GetNodeResponse>;
    /**
     * @generated from protobuf rpc: SetTags(headscale.v1.SetTagsRequest) returns (headscale.v1.SetTagsResponse);
     */
    setTags(input: SetTagsRequest, options?: RpcOptions): UnaryCall<SetTagsRequest, SetTagsResponse>;
    /**
     * @generated from protobuf rpc: RegisterNode(headscale.v1.RegisterNodeRequest) returns (headscale.v1.RegisterNodeResponse);
     */
    registerNode(input: RegisterNodeRequest, options?: RpcOptions): UnaryCall<RegisterNodeRequest, RegisterNodeResponse>;
    /**
     * @generated from protobuf rpc: DeleteNode(headscale.v1.DeleteNodeRequest) returns (headscale.v1.DeleteNodeResponse);
     */
    deleteNode(input: DeleteNodeRequest, options?: RpcOptions): UnaryCall<DeleteNodeRequest, DeleteNodeResponse>;
    /**
     * @generated from protobuf rpc: ExpireNode(headscale.v1.ExpireNodeRequest) returns (headscale.v1.ExpireNodeResponse);
     */
    expireNode(input: ExpireNodeRequest, options?: RpcOptions): UnaryCall<ExpireNodeRequest, ExpireNodeResponse>;
    /**
     * @generated from protobuf rpc: RenameNode(headscale.v1.RenameNodeRequest) returns (headscale.v1.RenameNodeResponse);
     */
    renameNode(input: RenameNodeRequest, options?: RpcOptions): UnaryCall<RenameNodeRequest, RenameNodeResponse>;
    /**
     * @generated from protobuf rpc: ListNodes(headscale.v1.ListNodesRequest) returns (headscale.v1.ListNodesResponse);
     */
    listNodes(input: ListNodesRequest, options?: RpcOptions): UnaryCall<ListNodesRequest, ListNodesResponse>;
    /**
     * @generated from protobuf rpc: MoveNode(headscale.v1.MoveNodeRequest) returns (headscale.v1.MoveNodeResponse);
     */
    moveNode(input: MoveNodeRequest, options?: RpcOptions): UnaryCall<MoveNodeRequest, MoveNodeResponse>;
    /**
     * @generated from protobuf rpc: BackfillNodeIPs(headscale.v1.BackfillNodeIPsRequest) returns (headscale.v1.BackfillNodeIPsResponse);
     */
    backfillNodeIPs(input: BackfillNodeIPsRequest, options?: RpcOptions): UnaryCall<BackfillNodeIPsRequest, BackfillNodeIPsResponse>;
    // --- Node end ---

    /**
     * --- Route start ---
     *
     * @generated from protobuf rpc: GetRoutes(headscale.v1.GetRoutesRequest) returns (headscale.v1.GetRoutesResponse);
     */
    getRoutes(input: GetRoutesRequest, options?: RpcOptions): UnaryCall<GetRoutesRequest, GetRoutesResponse>;
    /**
     * @generated from protobuf rpc: EnableRoute(headscale.v1.EnableRouteRequest) returns (headscale.v1.EnableRouteResponse);
     */
    enableRoute(input: EnableRouteRequest, options?: RpcOptions): UnaryCall<EnableRouteRequest, EnableRouteResponse>;
    /**
     * @generated from protobuf rpc: DisableRoute(headscale.v1.DisableRouteRequest) returns (headscale.v1.DisableRouteResponse);
     */
    disableRoute(input: DisableRouteRequest, options?: RpcOptions): UnaryCall<DisableRouteRequest, DisableRouteResponse>;
    /**
     * @generated from protobuf rpc: GetNodeRoutes(headscale.v1.GetNodeRoutesRequest) returns (headscale.v1.GetNodeRoutesResponse);
     */
    getNodeRoutes(input: GetNodeRoutesRequest, options?: RpcOptions): UnaryCall<GetNodeRoutesRequest, GetNodeRoutesResponse>;
    /**
     * @generated from protobuf rpc: DeleteRoute(headscale.v1.DeleteRouteRequest) returns (headscale.v1.DeleteRouteResponse);
     */
    deleteRoute(input: DeleteRouteRequest, options?: RpcOptions): UnaryCall<DeleteRouteRequest, DeleteRouteResponse>;
    // --- Route end ---

    /**
     * --- ApiKeys start ---
     *
     * @generated from protobuf rpc: CreateApiKey(headscale.v1.CreateApiKeyRequest) returns (headscale.v1.CreateApiKeyResponse);
     */
    createApiKey(input: CreateApiKeyRequest, options?: RpcOptions): UnaryCall<CreateApiKeyRequest, CreateApiKeyResponse>;
    /**
     * @generated from protobuf rpc: ExpireApiKey(headscale.v1.ExpireApiKeyRequest) returns (headscale.v1.ExpireApiKeyResponse);
     */
    expireApiKey(input: ExpireApiKeyRequest, options?: RpcOptions): UnaryCall<ExpireApiKeyRequest, ExpireApiKeyResponse>;
    /**
     * @generated from protobuf rpc: ListApiKeys(headscale.v1.ListApiKeysRequest) returns (headscale.v1.ListApiKeysResponse);
     */
    listApiKeys(input: ListApiKeysRequest, options?: RpcOptions): UnaryCall<ListApiKeysRequest, ListApiKeysResponse>;
    /**
     * @generated from protobuf rpc: DeleteApiKey(headscale.v1.DeleteApiKeyRequest) returns (headscale.v1.DeleteApiKeyResponse);
     */
    deleteApiKey(input: DeleteApiKeyRequest, options?: RpcOptions): UnaryCall<DeleteApiKeyRequest, DeleteApiKeyResponse>;
    /**
     * --- Policy start ---
     *
     * @generated from protobuf rpc: GetPolicy(headscale.v1.GetPolicyRequest) returns (headscale.v1.GetPolicyResponse);
     */
    getPolicy(input: GetPolicyRequest, options?: RpcOptions): UnaryCall<GetPolicyRequest, GetPolicyResponse>;
    /**
     * @generated from protobuf rpc: SetPolicy(headscale.v1.SetPolicyRequest) returns (headscale.v1.SetPolicyResponse);
     */
    setPolicy(input: SetPolicyRequest, options?: RpcOptions): UnaryCall<SetPolicyRequest, SetPolicyResponse>;
}
/**
 * @generated from protobuf service headscale.v1.HeadscaleService
 */
export class HeadscaleServiceClient implements IHeadscaleServiceClient, ServiceInfo {
    typeName = HeadscaleService.typeName;
    methods = HeadscaleService.methods;
    options = HeadscaleService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * --- User start ---
     *
     * @generated from protobuf rpc: CreateUser(headscale.v1.CreateUserRequest) returns (headscale.v1.CreateUserResponse);
     */
    createUser(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, CreateUserResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateUserRequest, CreateUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RenameUser(headscale.v1.RenameUserRequest) returns (headscale.v1.RenameUserResponse);
     */
    renameUser(input: RenameUserRequest, options?: RpcOptions): UnaryCall<RenameUserRequest, RenameUserResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RenameUserRequest, RenameUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteUser(headscale.v1.DeleteUserRequest) returns (headscale.v1.DeleteUserResponse);
     */
    deleteUser(input: DeleteUserRequest, options?: RpcOptions): UnaryCall<DeleteUserRequest, DeleteUserResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteUserRequest, DeleteUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListUsers(headscale.v1.ListUsersRequest) returns (headscale.v1.ListUsersResponse);
     */
    listUsers(input: ListUsersRequest, options?: RpcOptions): UnaryCall<ListUsersRequest, ListUsersResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListUsersRequest, ListUsersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * --- PreAuthKeys start ---
     *
     * @generated from protobuf rpc: CreatePreAuthKey(headscale.v1.CreatePreAuthKeyRequest) returns (headscale.v1.CreatePreAuthKeyResponse);
     */
    createPreAuthKey(input: CreatePreAuthKeyRequest, options?: RpcOptions): UnaryCall<CreatePreAuthKeyRequest, CreatePreAuthKeyResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreatePreAuthKeyRequest, CreatePreAuthKeyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ExpirePreAuthKey(headscale.v1.ExpirePreAuthKeyRequest) returns (headscale.v1.ExpirePreAuthKeyResponse);
     */
    expirePreAuthKey(input: ExpirePreAuthKeyRequest, options?: RpcOptions): UnaryCall<ExpirePreAuthKeyRequest, ExpirePreAuthKeyResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExpirePreAuthKeyRequest, ExpirePreAuthKeyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListPreAuthKeys(headscale.v1.ListPreAuthKeysRequest) returns (headscale.v1.ListPreAuthKeysResponse);
     */
    listPreAuthKeys(input: ListPreAuthKeysRequest, options?: RpcOptions): UnaryCall<ListPreAuthKeysRequest, ListPreAuthKeysResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListPreAuthKeysRequest, ListPreAuthKeysResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * --- Node start ---
     *
     * @generated from protobuf rpc: DebugCreateNode(headscale.v1.DebugCreateNodeRequest) returns (headscale.v1.DebugCreateNodeResponse);
     */
    debugCreateNode(input: DebugCreateNodeRequest, options?: RpcOptions): UnaryCall<DebugCreateNodeRequest, DebugCreateNodeResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<DebugCreateNodeRequest, DebugCreateNodeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetNode(headscale.v1.GetNodeRequest) returns (headscale.v1.GetNodeResponse);
     */
    getNode(input: GetNodeRequest, options?: RpcOptions): UnaryCall<GetNodeRequest, GetNodeResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetNodeRequest, GetNodeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetTags(headscale.v1.SetTagsRequest) returns (headscale.v1.SetTagsResponse);
     */
    setTags(input: SetTagsRequest, options?: RpcOptions): UnaryCall<SetTagsRequest, SetTagsResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetTagsRequest, SetTagsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RegisterNode(headscale.v1.RegisterNodeRequest) returns (headscale.v1.RegisterNodeResponse);
     */
    registerNode(input: RegisterNodeRequest, options?: RpcOptions): UnaryCall<RegisterNodeRequest, RegisterNodeResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterNodeRequest, RegisterNodeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteNode(headscale.v1.DeleteNodeRequest) returns (headscale.v1.DeleteNodeResponse);
     */
    deleteNode(input: DeleteNodeRequest, options?: RpcOptions): UnaryCall<DeleteNodeRequest, DeleteNodeResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteNodeRequest, DeleteNodeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ExpireNode(headscale.v1.ExpireNodeRequest) returns (headscale.v1.ExpireNodeResponse);
     */
    expireNode(input: ExpireNodeRequest, options?: RpcOptions): UnaryCall<ExpireNodeRequest, ExpireNodeResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExpireNodeRequest, ExpireNodeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RenameNode(headscale.v1.RenameNodeRequest) returns (headscale.v1.RenameNodeResponse);
     */
    renameNode(input: RenameNodeRequest, options?: RpcOptions): UnaryCall<RenameNodeRequest, RenameNodeResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<RenameNodeRequest, RenameNodeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListNodes(headscale.v1.ListNodesRequest) returns (headscale.v1.ListNodesResponse);
     */
    listNodes(input: ListNodesRequest, options?: RpcOptions): UnaryCall<ListNodesRequest, ListNodesResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListNodesRequest, ListNodesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: MoveNode(headscale.v1.MoveNodeRequest) returns (headscale.v1.MoveNodeResponse);
     */
    moveNode(input: MoveNodeRequest, options?: RpcOptions): UnaryCall<MoveNodeRequest, MoveNodeResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<MoveNodeRequest, MoveNodeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BackfillNodeIPs(headscale.v1.BackfillNodeIPsRequest) returns (headscale.v1.BackfillNodeIPsResponse);
     */
    backfillNodeIPs(input: BackfillNodeIPsRequest, options?: RpcOptions): UnaryCall<BackfillNodeIPsRequest, BackfillNodeIPsResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<BackfillNodeIPsRequest, BackfillNodeIPsResponse>("unary", this._transport, method, opt, input);
    }
    // --- Node end ---

    /**
     * --- Route start ---
     *
     * @generated from protobuf rpc: GetRoutes(headscale.v1.GetRoutesRequest) returns (headscale.v1.GetRoutesResponse);
     */
    getRoutes(input: GetRoutesRequest, options?: RpcOptions): UnaryCall<GetRoutesRequest, GetRoutesResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRoutesRequest, GetRoutesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EnableRoute(headscale.v1.EnableRouteRequest) returns (headscale.v1.EnableRouteResponse);
     */
    enableRoute(input: EnableRouteRequest, options?: RpcOptions): UnaryCall<EnableRouteRequest, EnableRouteResponse> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<EnableRouteRequest, EnableRouteResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisableRoute(headscale.v1.DisableRouteRequest) returns (headscale.v1.DisableRouteResponse);
     */
    disableRoute(input: DisableRouteRequest, options?: RpcOptions): UnaryCall<DisableRouteRequest, DisableRouteResponse> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<DisableRouteRequest, DisableRouteResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetNodeRoutes(headscale.v1.GetNodeRoutesRequest) returns (headscale.v1.GetNodeRoutesResponse);
     */
    getNodeRoutes(input: GetNodeRoutesRequest, options?: RpcOptions): UnaryCall<GetNodeRoutesRequest, GetNodeRoutesResponse> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetNodeRoutesRequest, GetNodeRoutesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteRoute(headscale.v1.DeleteRouteRequest) returns (headscale.v1.DeleteRouteResponse);
     */
    deleteRoute(input: DeleteRouteRequest, options?: RpcOptions): UnaryCall<DeleteRouteRequest, DeleteRouteResponse> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRouteRequest, DeleteRouteResponse>("unary", this._transport, method, opt, input);
    }
    // --- Route end ---

    /**
     * --- ApiKeys start ---
     *
     * @generated from protobuf rpc: CreateApiKey(headscale.v1.CreateApiKeyRequest) returns (headscale.v1.CreateApiKeyResponse);
     */
    createApiKey(input: CreateApiKeyRequest, options?: RpcOptions): UnaryCall<CreateApiKeyRequest, CreateApiKeyResponse> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateApiKeyRequest, CreateApiKeyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ExpireApiKey(headscale.v1.ExpireApiKeyRequest) returns (headscale.v1.ExpireApiKeyResponse);
     */
    expireApiKey(input: ExpireApiKeyRequest, options?: RpcOptions): UnaryCall<ExpireApiKeyRequest, ExpireApiKeyResponse> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExpireApiKeyRequest, ExpireApiKeyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListApiKeys(headscale.v1.ListApiKeysRequest) returns (headscale.v1.ListApiKeysResponse);
     */
    listApiKeys(input: ListApiKeysRequest, options?: RpcOptions): UnaryCall<ListApiKeysRequest, ListApiKeysResponse> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListApiKeysRequest, ListApiKeysResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteApiKey(headscale.v1.DeleteApiKeyRequest) returns (headscale.v1.DeleteApiKeyResponse);
     */
    deleteApiKey(input: DeleteApiKeyRequest, options?: RpcOptions): UnaryCall<DeleteApiKeyRequest, DeleteApiKeyResponse> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteApiKeyRequest, DeleteApiKeyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * --- Policy start ---
     *
     * @generated from protobuf rpc: GetPolicy(headscale.v1.GetPolicyRequest) returns (headscale.v1.GetPolicyResponse);
     */
    getPolicy(input: GetPolicyRequest, options?: RpcOptions): UnaryCall<GetPolicyRequest, GetPolicyResponse> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPolicyRequest, GetPolicyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetPolicy(headscale.v1.SetPolicyRequest) returns (headscale.v1.SetPolicyResponse);
     */
    setPolicy(input: SetPolicyRequest, options?: RpcOptions): UnaryCall<SetPolicyRequest, SetPolicyResponse> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetPolicyRequest, SetPolicyResponse>("unary", this._transport, method, opt, input);
    }
}
