// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "headscale/v1/preauthkey.proto" (package "headscale.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp";
/**
 * @generated from protobuf message headscale.v1.PreAuthKey
 */
export interface PreAuthKey {
    /**
     * @generated from protobuf field: string user = 1;
     */
    user: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string key = 3;
     */
    key: string;
    /**
     * @generated from protobuf field: bool reusable = 4;
     */
    reusable: boolean;
    /**
     * @generated from protobuf field: bool ephemeral = 5;
     */
    ephemeral: boolean;
    /**
     * @generated from protobuf field: bool used = 6;
     */
    used: boolean;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expiration = 7;
     */
    expiration?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 8;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated string acl_tags = 9;
     */
    aclTags: string[];
}
/**
 * @generated from protobuf message headscale.v1.CreatePreAuthKeyRequest
 */
export interface CreatePreAuthKeyRequest {
    /**
     * @generated from protobuf field: string user = 1;
     */
    user: string;
    /**
     * @generated from protobuf field: bool reusable = 2;
     */
    reusable: boolean;
    /**
     * @generated from protobuf field: bool ephemeral = 3;
     */
    ephemeral: boolean;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expiration = 4;
     */
    expiration?: Timestamp;
    /**
     * @generated from protobuf field: repeated string acl_tags = 5;
     */
    aclTags: string[];
}
/**
 * @generated from protobuf message headscale.v1.CreatePreAuthKeyResponse
 */
export interface CreatePreAuthKeyResponse {
    /**
     * @generated from protobuf field: headscale.v1.PreAuthKey pre_auth_key = 1;
     */
    preAuthKey?: PreAuthKey;
}
/**
 * @generated from protobuf message headscale.v1.ExpirePreAuthKeyRequest
 */
export interface ExpirePreAuthKeyRequest {
    /**
     * @generated from protobuf field: string user = 1;
     */
    user: string;
    /**
     * @generated from protobuf field: string key = 2;
     */
    key: string;
}
/**
 * @generated from protobuf message headscale.v1.ExpirePreAuthKeyResponse
 */
export interface ExpirePreAuthKeyResponse {
}
/**
 * @generated from protobuf message headscale.v1.ListPreAuthKeysRequest
 */
export interface ListPreAuthKeysRequest {
    /**
     * @generated from protobuf field: string user = 1;
     */
    user: string;
}
/**
 * @generated from protobuf message headscale.v1.ListPreAuthKeysResponse
 */
export interface ListPreAuthKeysResponse {
    /**
     * @generated from protobuf field: repeated headscale.v1.PreAuthKey pre_auth_keys = 1;
     */
    preAuthKeys: PreAuthKey[];
}
// @generated message type with reflection information, may provide speed optimized methods
class PreAuthKey$Type extends MessageType<PreAuthKey> {
    constructor() {
        super("headscale.v1.PreAuthKey", [
            { no: 1, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "reusable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "ephemeral", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "used", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "expiration", kind: "message", T: () => Timestamp },
            { no: 8, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 9, name: "acl_tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PreAuthKey>): PreAuthKey {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.user = "";
        message.id = "";
        message.key = "";
        message.reusable = false;
        message.ephemeral = false;
        message.used = false;
        message.aclTags = [];
        if (value !== undefined)
            reflectionMergePartial<PreAuthKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreAuthKey): PreAuthKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user */ 1:
                    message.user = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string key */ 3:
                    message.key = reader.string();
                    break;
                case /* bool reusable */ 4:
                    message.reusable = reader.bool();
                    break;
                case /* bool ephemeral */ 5:
                    message.ephemeral = reader.bool();
                    break;
                case /* bool used */ 6:
                    message.used = reader.bool();
                    break;
                case /* google.protobuf.Timestamp expiration */ 7:
                    message.expiration = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiration);
                    break;
                case /* google.protobuf.Timestamp created_at */ 8:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* repeated string acl_tags */ 9:
                    message.aclTags.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreAuthKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user = 1; */
        if (message.user !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.user);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string key = 3; */
        if (message.key !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.key);
        /* bool reusable = 4; */
        if (message.reusable !== false)
            writer.tag(4, WireType.Varint).bool(message.reusable);
        /* bool ephemeral = 5; */
        if (message.ephemeral !== false)
            writer.tag(5, WireType.Varint).bool(message.ephemeral);
        /* bool used = 6; */
        if (message.used !== false)
            writer.tag(6, WireType.Varint).bool(message.used);
        /* google.protobuf.Timestamp expiration = 7; */
        if (message.expiration)
            Timestamp.internalBinaryWrite(message.expiration, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp created_at = 8; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated string acl_tags = 9; */
        for (let i = 0; i < message.aclTags.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.aclTags[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.PreAuthKey
 */
export const PreAuthKey = new PreAuthKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePreAuthKeyRequest$Type extends MessageType<CreatePreAuthKeyRequest> {
    constructor() {
        super("headscale.v1.CreatePreAuthKeyRequest", [
            { no: 1, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reusable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "ephemeral", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "expiration", kind: "message", T: () => Timestamp },
            { no: 5, name: "acl_tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreatePreAuthKeyRequest>): CreatePreAuthKeyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.user = "";
        message.reusable = false;
        message.ephemeral = false;
        message.aclTags = [];
        if (value !== undefined)
            reflectionMergePartial<CreatePreAuthKeyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePreAuthKeyRequest): CreatePreAuthKeyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user */ 1:
                    message.user = reader.string();
                    break;
                case /* bool reusable */ 2:
                    message.reusable = reader.bool();
                    break;
                case /* bool ephemeral */ 3:
                    message.ephemeral = reader.bool();
                    break;
                case /* google.protobuf.Timestamp expiration */ 4:
                    message.expiration = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiration);
                    break;
                case /* repeated string acl_tags */ 5:
                    message.aclTags.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePreAuthKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user = 1; */
        if (message.user !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.user);
        /* bool reusable = 2; */
        if (message.reusable !== false)
            writer.tag(2, WireType.Varint).bool(message.reusable);
        /* bool ephemeral = 3; */
        if (message.ephemeral !== false)
            writer.tag(3, WireType.Varint).bool(message.ephemeral);
        /* google.protobuf.Timestamp expiration = 4; */
        if (message.expiration)
            Timestamp.internalBinaryWrite(message.expiration, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated string acl_tags = 5; */
        for (let i = 0; i < message.aclTags.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.aclTags[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.CreatePreAuthKeyRequest
 */
export const CreatePreAuthKeyRequest = new CreatePreAuthKeyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePreAuthKeyResponse$Type extends MessageType<CreatePreAuthKeyResponse> {
    constructor() {
        super("headscale.v1.CreatePreAuthKeyResponse", [
            { no: 1, name: "pre_auth_key", kind: "message", T: () => PreAuthKey }
        ]);
    }
    create(value?: PartialMessage<CreatePreAuthKeyResponse>): CreatePreAuthKeyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreatePreAuthKeyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePreAuthKeyResponse): CreatePreAuthKeyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* headscale.v1.PreAuthKey pre_auth_key */ 1:
                    message.preAuthKey = PreAuthKey.internalBinaryRead(reader, reader.uint32(), options, message.preAuthKey);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePreAuthKeyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* headscale.v1.PreAuthKey pre_auth_key = 1; */
        if (message.preAuthKey)
            PreAuthKey.internalBinaryWrite(message.preAuthKey, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.CreatePreAuthKeyResponse
 */
export const CreatePreAuthKeyResponse = new CreatePreAuthKeyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpirePreAuthKeyRequest$Type extends MessageType<ExpirePreAuthKeyRequest> {
    constructor() {
        super("headscale.v1.ExpirePreAuthKeyRequest", [
            { no: 1, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ExpirePreAuthKeyRequest>): ExpirePreAuthKeyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.user = "";
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial<ExpirePreAuthKeyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpirePreAuthKeyRequest): ExpirePreAuthKeyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user */ 1:
                    message.user = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpirePreAuthKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user = 1; */
        if (message.user !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.user);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.ExpirePreAuthKeyRequest
 */
export const ExpirePreAuthKeyRequest = new ExpirePreAuthKeyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpirePreAuthKeyResponse$Type extends MessageType<ExpirePreAuthKeyResponse> {
    constructor() {
        super("headscale.v1.ExpirePreAuthKeyResponse", []);
    }
    create(value?: PartialMessage<ExpirePreAuthKeyResponse>): ExpirePreAuthKeyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExpirePreAuthKeyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpirePreAuthKeyResponse): ExpirePreAuthKeyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpirePreAuthKeyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.ExpirePreAuthKeyResponse
 */
export const ExpirePreAuthKeyResponse = new ExpirePreAuthKeyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPreAuthKeysRequest$Type extends MessageType<ListPreAuthKeysRequest> {
    constructor() {
        super("headscale.v1.ListPreAuthKeysRequest", [
            { no: 1, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListPreAuthKeysRequest>): ListPreAuthKeysRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.user = "";
        if (value !== undefined)
            reflectionMergePartial<ListPreAuthKeysRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPreAuthKeysRequest): ListPreAuthKeysRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user */ 1:
                    message.user = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPreAuthKeysRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user = 1; */
        if (message.user !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.user);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.ListPreAuthKeysRequest
 */
export const ListPreAuthKeysRequest = new ListPreAuthKeysRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPreAuthKeysResponse$Type extends MessageType<ListPreAuthKeysResponse> {
    constructor() {
        super("headscale.v1.ListPreAuthKeysResponse", [
            { no: 1, name: "pre_auth_keys", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PreAuthKey }
        ]);
    }
    create(value?: PartialMessage<ListPreAuthKeysResponse>): ListPreAuthKeysResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.preAuthKeys = [];
        if (value !== undefined)
            reflectionMergePartial<ListPreAuthKeysResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPreAuthKeysResponse): ListPreAuthKeysResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated headscale.v1.PreAuthKey pre_auth_keys */ 1:
                    message.preAuthKeys.push(PreAuthKey.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPreAuthKeysResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated headscale.v1.PreAuthKey pre_auth_keys = 1; */
        for (let i = 0; i < message.preAuthKeys.length; i++)
            PreAuthKey.internalBinaryWrite(message.preAuthKeys[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.ListPreAuthKeysResponse
 */
export const ListPreAuthKeysResponse = new ListPreAuthKeysResponse$Type();
