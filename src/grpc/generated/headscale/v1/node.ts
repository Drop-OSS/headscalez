// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "headscale/v1/node.proto" (package "headscale.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PreAuthKey } from "./preauthkey";
import { Timestamp } from "../../google/protobuf/timestamp";
import { User } from "./user";
/**
 * @generated from protobuf message headscale.v1.Node
 */
export interface Node {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string machine_key = 2;
     */
    machineKey: string;
    /**
     * @generated from protobuf field: string node_key = 3;
     */
    nodeKey: string;
    /**
     * @generated from protobuf field: string disco_key = 4;
     */
    discoKey: string;
    /**
     * @generated from protobuf field: repeated string ip_addresses = 5;
     */
    ipAddresses: string[];
    /**
     * @generated from protobuf field: string name = 6;
     */
    name: string;
    /**
     * @generated from protobuf field: headscale.v1.User user = 7;
     */
    user?: User;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp last_seen = 8;
     */
    lastSeen?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expiry = 10;
     */
    expiry?: Timestamp;
    /**
     * @generated from protobuf field: headscale.v1.PreAuthKey pre_auth_key = 11;
     */
    preAuthKey?: PreAuthKey;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 12;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: headscale.v1.RegisterMethod register_method = 13;
     */
    registerMethod: RegisterMethod;
    // bytes host_info      = 15;
    // bytes endpoints      = 16;
    // bytes enabled_routes = 17;

    /**
     * @generated from protobuf field: repeated string forced_tags = 18;
     */
    forcedTags: string[];
    /**
     * @generated from protobuf field: repeated string invalid_tags = 19;
     */
    invalidTags: string[];
    /**
     * @generated from protobuf field: repeated string valid_tags = 20;
     */
    validTags: string[];
    /**
     * @generated from protobuf field: string given_name = 21;
     */
    givenName: string;
    /**
     * @generated from protobuf field: bool online = 22;
     */
    online: boolean;
}
/**
 * @generated from protobuf message headscale.v1.RegisterNodeRequest
 */
export interface RegisterNodeRequest {
    /**
     * @generated from protobuf field: string user = 1;
     */
    user: string;
    /**
     * @generated from protobuf field: string key = 2;
     */
    key: string;
}
/**
 * @generated from protobuf message headscale.v1.RegisterNodeResponse
 */
export interface RegisterNodeResponse {
    /**
     * @generated from protobuf field: headscale.v1.Node node = 1;
     */
    node?: Node;
}
/**
 * @generated from protobuf message headscale.v1.GetNodeRequest
 */
export interface GetNodeRequest {
    /**
     * @generated from protobuf field: uint64 node_id = 1;
     */
    nodeId: bigint;
}
/**
 * @generated from protobuf message headscale.v1.GetNodeResponse
 */
export interface GetNodeResponse {
    /**
     * @generated from protobuf field: headscale.v1.Node node = 1;
     */
    node?: Node;
}
/**
 * @generated from protobuf message headscale.v1.SetTagsRequest
 */
export interface SetTagsRequest {
    /**
     * @generated from protobuf field: uint64 node_id = 1;
     */
    nodeId: bigint;
    /**
     * @generated from protobuf field: repeated string tags = 2;
     */
    tags: string[];
}
/**
 * @generated from protobuf message headscale.v1.SetTagsResponse
 */
export interface SetTagsResponse {
    /**
     * @generated from protobuf field: headscale.v1.Node node = 1;
     */
    node?: Node;
}
/**
 * @generated from protobuf message headscale.v1.DeleteNodeRequest
 */
export interface DeleteNodeRequest {
    /**
     * @generated from protobuf field: uint64 node_id = 1;
     */
    nodeId: bigint;
}
/**
 * @generated from protobuf message headscale.v1.DeleteNodeResponse
 */
export interface DeleteNodeResponse {
}
/**
 * @generated from protobuf message headscale.v1.ExpireNodeRequest
 */
export interface ExpireNodeRequest {
    /**
     * @generated from protobuf field: uint64 node_id = 1;
     */
    nodeId: bigint;
}
/**
 * @generated from protobuf message headscale.v1.ExpireNodeResponse
 */
export interface ExpireNodeResponse {
    /**
     * @generated from protobuf field: headscale.v1.Node node = 1;
     */
    node?: Node;
}
/**
 * @generated from protobuf message headscale.v1.RenameNodeRequest
 */
export interface RenameNodeRequest {
    /**
     * @generated from protobuf field: uint64 node_id = 1;
     */
    nodeId: bigint;
    /**
     * @generated from protobuf field: string new_name = 2;
     */
    newName: string;
}
/**
 * @generated from protobuf message headscale.v1.RenameNodeResponse
 */
export interface RenameNodeResponse {
    /**
     * @generated from protobuf field: headscale.v1.Node node = 1;
     */
    node?: Node;
}
/**
 * @generated from protobuf message headscale.v1.ListNodesRequest
 */
export interface ListNodesRequest {
    /**
     * @generated from protobuf field: string user = 1;
     */
    user: string;
}
/**
 * @generated from protobuf message headscale.v1.ListNodesResponse
 */
export interface ListNodesResponse {
    /**
     * @generated from protobuf field: repeated headscale.v1.Node nodes = 1;
     */
    nodes: Node[];
}
/**
 * @generated from protobuf message headscale.v1.MoveNodeRequest
 */
export interface MoveNodeRequest {
    /**
     * @generated from protobuf field: uint64 node_id = 1;
     */
    nodeId: bigint;
    /**
     * @generated from protobuf field: string user = 2;
     */
    user: string;
}
/**
 * @generated from protobuf message headscale.v1.MoveNodeResponse
 */
export interface MoveNodeResponse {
    /**
     * @generated from protobuf field: headscale.v1.Node node = 1;
     */
    node?: Node;
}
/**
 * @generated from protobuf message headscale.v1.DebugCreateNodeRequest
 */
export interface DebugCreateNodeRequest {
    /**
     * @generated from protobuf field: string user = 1;
     */
    user: string;
    /**
     * @generated from protobuf field: string key = 2;
     */
    key: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated string routes = 4;
     */
    routes: string[];
}
/**
 * @generated from protobuf message headscale.v1.DebugCreateNodeResponse
 */
export interface DebugCreateNodeResponse {
    /**
     * @generated from protobuf field: headscale.v1.Node node = 1;
     */
    node?: Node;
}
/**
 * @generated from protobuf message headscale.v1.BackfillNodeIPsRequest
 */
export interface BackfillNodeIPsRequest {
    /**
     * @generated from protobuf field: bool confirmed = 1;
     */
    confirmed: boolean;
}
/**
 * @generated from protobuf message headscale.v1.BackfillNodeIPsResponse
 */
export interface BackfillNodeIPsResponse {
    /**
     * @generated from protobuf field: repeated string changes = 1;
     */
    changes: string[];
}
/**
 * @generated from protobuf enum headscale.v1.RegisterMethod
 */
export enum RegisterMethod {
    /**
     * @generated from protobuf enum value: REGISTER_METHOD_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: REGISTER_METHOD_AUTH_KEY = 1;
     */
    AUTH_KEY = 1,
    /**
     * @generated from protobuf enum value: REGISTER_METHOD_CLI = 2;
     */
    CLI = 2,
    /**
     * @generated from protobuf enum value: REGISTER_METHOD_OIDC = 3;
     */
    OIDC = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Node$Type extends MessageType<Node> {
    constructor() {
        super("headscale.v1.Node", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "machine_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "node_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "disco_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ip_addresses", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "user", kind: "message", T: () => User },
            { no: 8, name: "last_seen", kind: "message", T: () => Timestamp },
            { no: 10, name: "expiry", kind: "message", T: () => Timestamp },
            { no: 11, name: "pre_auth_key", kind: "message", T: () => PreAuthKey },
            { no: 12, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 13, name: "register_method", kind: "enum", T: () => ["headscale.v1.RegisterMethod", RegisterMethod, "REGISTER_METHOD_"] },
            { no: 18, name: "forced_tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "invalid_tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "valid_tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "given_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "online", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Node>): Node {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.machineKey = "";
        message.nodeKey = "";
        message.discoKey = "";
        message.ipAddresses = [];
        message.name = "";
        message.registerMethod = 0;
        message.forcedTags = [];
        message.invalidTags = [];
        message.validTags = [];
        message.givenName = "";
        message.online = false;
        if (value !== undefined)
            reflectionMergePartial<Node>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Node): Node {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string machine_key */ 2:
                    message.machineKey = reader.string();
                    break;
                case /* string node_key */ 3:
                    message.nodeKey = reader.string();
                    break;
                case /* string disco_key */ 4:
                    message.discoKey = reader.string();
                    break;
                case /* repeated string ip_addresses */ 5:
                    message.ipAddresses.push(reader.string());
                    break;
                case /* string name */ 6:
                    message.name = reader.string();
                    break;
                case /* headscale.v1.User user */ 7:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* google.protobuf.Timestamp last_seen */ 8:
                    message.lastSeen = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastSeen);
                    break;
                case /* google.protobuf.Timestamp expiry */ 10:
                    message.expiry = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiry);
                    break;
                case /* headscale.v1.PreAuthKey pre_auth_key */ 11:
                    message.preAuthKey = PreAuthKey.internalBinaryRead(reader, reader.uint32(), options, message.preAuthKey);
                    break;
                case /* google.protobuf.Timestamp created_at */ 12:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* headscale.v1.RegisterMethod register_method */ 13:
                    message.registerMethod = reader.int32();
                    break;
                case /* repeated string forced_tags */ 18:
                    message.forcedTags.push(reader.string());
                    break;
                case /* repeated string invalid_tags */ 19:
                    message.invalidTags.push(reader.string());
                    break;
                case /* repeated string valid_tags */ 20:
                    message.validTags.push(reader.string());
                    break;
                case /* string given_name */ 21:
                    message.givenName = reader.string();
                    break;
                case /* bool online */ 22:
                    message.online = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Node, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string machine_key = 2; */
        if (message.machineKey !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.machineKey);
        /* string node_key = 3; */
        if (message.nodeKey !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.nodeKey);
        /* string disco_key = 4; */
        if (message.discoKey !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.discoKey);
        /* repeated string ip_addresses = 5; */
        for (let i = 0; i < message.ipAddresses.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.ipAddresses[i]);
        /* string name = 6; */
        if (message.name !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.name);
        /* headscale.v1.User user = 7; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp last_seen = 8; */
        if (message.lastSeen)
            Timestamp.internalBinaryWrite(message.lastSeen, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp expiry = 10; */
        if (message.expiry)
            Timestamp.internalBinaryWrite(message.expiry, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* headscale.v1.PreAuthKey pre_auth_key = 11; */
        if (message.preAuthKey)
            PreAuthKey.internalBinaryWrite(message.preAuthKey, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp created_at = 12; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* headscale.v1.RegisterMethod register_method = 13; */
        if (message.registerMethod !== 0)
            writer.tag(13, WireType.Varint).int32(message.registerMethod);
        /* repeated string forced_tags = 18; */
        for (let i = 0; i < message.forcedTags.length; i++)
            writer.tag(18, WireType.LengthDelimited).string(message.forcedTags[i]);
        /* repeated string invalid_tags = 19; */
        for (let i = 0; i < message.invalidTags.length; i++)
            writer.tag(19, WireType.LengthDelimited).string(message.invalidTags[i]);
        /* repeated string valid_tags = 20; */
        for (let i = 0; i < message.validTags.length; i++)
            writer.tag(20, WireType.LengthDelimited).string(message.validTags[i]);
        /* string given_name = 21; */
        if (message.givenName !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.givenName);
        /* bool online = 22; */
        if (message.online !== false)
            writer.tag(22, WireType.Varint).bool(message.online);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.Node
 */
export const Node = new Node$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterNodeRequest$Type extends MessageType<RegisterNodeRequest> {
    constructor() {
        super("headscale.v1.RegisterNodeRequest", [
            { no: 1, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterNodeRequest>): RegisterNodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.user = "";
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial<RegisterNodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterNodeRequest): RegisterNodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user */ 1:
                    message.user = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterNodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user = 1; */
        if (message.user !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.user);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.RegisterNodeRequest
 */
export const RegisterNodeRequest = new RegisterNodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterNodeResponse$Type extends MessageType<RegisterNodeResponse> {
    constructor() {
        super("headscale.v1.RegisterNodeResponse", [
            { no: 1, name: "node", kind: "message", T: () => Node }
        ]);
    }
    create(value?: PartialMessage<RegisterNodeResponse>): RegisterNodeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RegisterNodeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterNodeResponse): RegisterNodeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* headscale.v1.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterNodeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* headscale.v1.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.RegisterNodeResponse
 */
export const RegisterNodeResponse = new RegisterNodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNodeRequest$Type extends MessageType<GetNodeRequest> {
    constructor() {
        super("headscale.v1.GetNodeRequest", [
            { no: 1, name: "node_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetNodeRequest>): GetNodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nodeId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetNodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNodeRequest): GetNodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 node_id */ 1:
                    message.nodeId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 node_id = 1; */
        if (message.nodeId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.nodeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.GetNodeRequest
 */
export const GetNodeRequest = new GetNodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNodeResponse$Type extends MessageType<GetNodeResponse> {
    constructor() {
        super("headscale.v1.GetNodeResponse", [
            { no: 1, name: "node", kind: "message", T: () => Node }
        ]);
    }
    create(value?: PartialMessage<GetNodeResponse>): GetNodeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetNodeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNodeResponse): GetNodeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* headscale.v1.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNodeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* headscale.v1.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.GetNodeResponse
 */
export const GetNodeResponse = new GetNodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetTagsRequest$Type extends MessageType<SetTagsRequest> {
    constructor() {
        super("headscale.v1.SetTagsRequest", [
            { no: 1, name: "node_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetTagsRequest>): SetTagsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nodeId = 0n;
        message.tags = [];
        if (value !== undefined)
            reflectionMergePartial<SetTagsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetTagsRequest): SetTagsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 node_id */ 1:
                    message.nodeId = reader.uint64().toBigInt();
                    break;
                case /* repeated string tags */ 2:
                    message.tags.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetTagsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 node_id = 1; */
        if (message.nodeId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.nodeId);
        /* repeated string tags = 2; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.tags[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.SetTagsRequest
 */
export const SetTagsRequest = new SetTagsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetTagsResponse$Type extends MessageType<SetTagsResponse> {
    constructor() {
        super("headscale.v1.SetTagsResponse", [
            { no: 1, name: "node", kind: "message", T: () => Node }
        ]);
    }
    create(value?: PartialMessage<SetTagsResponse>): SetTagsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetTagsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetTagsResponse): SetTagsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* headscale.v1.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetTagsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* headscale.v1.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.SetTagsResponse
 */
export const SetTagsResponse = new SetTagsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteNodeRequest$Type extends MessageType<DeleteNodeRequest> {
    constructor() {
        super("headscale.v1.DeleteNodeRequest", [
            { no: 1, name: "node_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteNodeRequest>): DeleteNodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nodeId = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeleteNodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteNodeRequest): DeleteNodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 node_id */ 1:
                    message.nodeId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteNodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 node_id = 1; */
        if (message.nodeId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.nodeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.DeleteNodeRequest
 */
export const DeleteNodeRequest = new DeleteNodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteNodeResponse$Type extends MessageType<DeleteNodeResponse> {
    constructor() {
        super("headscale.v1.DeleteNodeResponse", []);
    }
    create(value?: PartialMessage<DeleteNodeResponse>): DeleteNodeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteNodeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteNodeResponse): DeleteNodeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteNodeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.DeleteNodeResponse
 */
export const DeleteNodeResponse = new DeleteNodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpireNodeRequest$Type extends MessageType<ExpireNodeRequest> {
    constructor() {
        super("headscale.v1.ExpireNodeRequest", [
            { no: 1, name: "node_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ExpireNodeRequest>): ExpireNodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nodeId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ExpireNodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpireNodeRequest): ExpireNodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 node_id */ 1:
                    message.nodeId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpireNodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 node_id = 1; */
        if (message.nodeId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.nodeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.ExpireNodeRequest
 */
export const ExpireNodeRequest = new ExpireNodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpireNodeResponse$Type extends MessageType<ExpireNodeResponse> {
    constructor() {
        super("headscale.v1.ExpireNodeResponse", [
            { no: 1, name: "node", kind: "message", T: () => Node }
        ]);
    }
    create(value?: PartialMessage<ExpireNodeResponse>): ExpireNodeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExpireNodeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpireNodeResponse): ExpireNodeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* headscale.v1.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpireNodeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* headscale.v1.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.ExpireNodeResponse
 */
export const ExpireNodeResponse = new ExpireNodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RenameNodeRequest$Type extends MessageType<RenameNodeRequest> {
    constructor() {
        super("headscale.v1.RenameNodeRequest", [
            { no: 1, name: "node_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "new_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RenameNodeRequest>): RenameNodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nodeId = 0n;
        message.newName = "";
        if (value !== undefined)
            reflectionMergePartial<RenameNodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RenameNodeRequest): RenameNodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 node_id */ 1:
                    message.nodeId = reader.uint64().toBigInt();
                    break;
                case /* string new_name */ 2:
                    message.newName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RenameNodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 node_id = 1; */
        if (message.nodeId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.nodeId);
        /* string new_name = 2; */
        if (message.newName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.newName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.RenameNodeRequest
 */
export const RenameNodeRequest = new RenameNodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RenameNodeResponse$Type extends MessageType<RenameNodeResponse> {
    constructor() {
        super("headscale.v1.RenameNodeResponse", [
            { no: 1, name: "node", kind: "message", T: () => Node }
        ]);
    }
    create(value?: PartialMessage<RenameNodeResponse>): RenameNodeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RenameNodeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RenameNodeResponse): RenameNodeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* headscale.v1.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RenameNodeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* headscale.v1.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.RenameNodeResponse
 */
export const RenameNodeResponse = new RenameNodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNodesRequest$Type extends MessageType<ListNodesRequest> {
    constructor() {
        super("headscale.v1.ListNodesRequest", [
            { no: 1, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListNodesRequest>): ListNodesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.user = "";
        if (value !== undefined)
            reflectionMergePartial<ListNodesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNodesRequest): ListNodesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user */ 1:
                    message.user = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListNodesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user = 1; */
        if (message.user !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.user);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.ListNodesRequest
 */
export const ListNodesRequest = new ListNodesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNodesResponse$Type extends MessageType<ListNodesResponse> {
    constructor() {
        super("headscale.v1.ListNodesResponse", [
            { no: 1, name: "nodes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Node }
        ]);
    }
    create(value?: PartialMessage<ListNodesResponse>): ListNodesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nodes = [];
        if (value !== undefined)
            reflectionMergePartial<ListNodesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNodesResponse): ListNodesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated headscale.v1.Node nodes */ 1:
                    message.nodes.push(Node.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListNodesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated headscale.v1.Node nodes = 1; */
        for (let i = 0; i < message.nodes.length; i++)
            Node.internalBinaryWrite(message.nodes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.ListNodesResponse
 */
export const ListNodesResponse = new ListNodesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoveNodeRequest$Type extends MessageType<MoveNodeRequest> {
    constructor() {
        super("headscale.v1.MoveNodeRequest", [
            { no: 1, name: "node_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MoveNodeRequest>): MoveNodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nodeId = 0n;
        message.user = "";
        if (value !== undefined)
            reflectionMergePartial<MoveNodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoveNodeRequest): MoveNodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 node_id */ 1:
                    message.nodeId = reader.uint64().toBigInt();
                    break;
                case /* string user */ 2:
                    message.user = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoveNodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 node_id = 1; */
        if (message.nodeId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.nodeId);
        /* string user = 2; */
        if (message.user !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.user);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.MoveNodeRequest
 */
export const MoveNodeRequest = new MoveNodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoveNodeResponse$Type extends MessageType<MoveNodeResponse> {
    constructor() {
        super("headscale.v1.MoveNodeResponse", [
            { no: 1, name: "node", kind: "message", T: () => Node }
        ]);
    }
    create(value?: PartialMessage<MoveNodeResponse>): MoveNodeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MoveNodeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoveNodeResponse): MoveNodeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* headscale.v1.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoveNodeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* headscale.v1.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.MoveNodeResponse
 */
export const MoveNodeResponse = new MoveNodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DebugCreateNodeRequest$Type extends MessageType<DebugCreateNodeRequest> {
    constructor() {
        super("headscale.v1.DebugCreateNodeRequest", [
            { no: 1, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "routes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DebugCreateNodeRequest>): DebugCreateNodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.user = "";
        message.key = "";
        message.name = "";
        message.routes = [];
        if (value !== undefined)
            reflectionMergePartial<DebugCreateNodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DebugCreateNodeRequest): DebugCreateNodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user */ 1:
                    message.user = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* repeated string routes */ 4:
                    message.routes.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DebugCreateNodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user = 1; */
        if (message.user !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.user);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* repeated string routes = 4; */
        for (let i = 0; i < message.routes.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.routes[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.DebugCreateNodeRequest
 */
export const DebugCreateNodeRequest = new DebugCreateNodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DebugCreateNodeResponse$Type extends MessageType<DebugCreateNodeResponse> {
    constructor() {
        super("headscale.v1.DebugCreateNodeResponse", [
            { no: 1, name: "node", kind: "message", T: () => Node }
        ]);
    }
    create(value?: PartialMessage<DebugCreateNodeResponse>): DebugCreateNodeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DebugCreateNodeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DebugCreateNodeResponse): DebugCreateNodeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* headscale.v1.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DebugCreateNodeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* headscale.v1.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.DebugCreateNodeResponse
 */
export const DebugCreateNodeResponse = new DebugCreateNodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BackfillNodeIPsRequest$Type extends MessageType<BackfillNodeIPsRequest> {
    constructor() {
        super("headscale.v1.BackfillNodeIPsRequest", [
            { no: 1, name: "confirmed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BackfillNodeIPsRequest>): BackfillNodeIPsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.confirmed = false;
        if (value !== undefined)
            reflectionMergePartial<BackfillNodeIPsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BackfillNodeIPsRequest): BackfillNodeIPsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool confirmed */ 1:
                    message.confirmed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BackfillNodeIPsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool confirmed = 1; */
        if (message.confirmed !== false)
            writer.tag(1, WireType.Varint).bool(message.confirmed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.BackfillNodeIPsRequest
 */
export const BackfillNodeIPsRequest = new BackfillNodeIPsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BackfillNodeIPsResponse$Type extends MessageType<BackfillNodeIPsResponse> {
    constructor() {
        super("headscale.v1.BackfillNodeIPsResponse", [
            { no: 1, name: "changes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BackfillNodeIPsResponse>): BackfillNodeIPsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.changes = [];
        if (value !== undefined)
            reflectionMergePartial<BackfillNodeIPsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BackfillNodeIPsResponse): BackfillNodeIPsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string changes */ 1:
                    message.changes.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BackfillNodeIPsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string changes = 1; */
        for (let i = 0; i < message.changes.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.changes[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message headscale.v1.BackfillNodeIPsResponse
 */
export const BackfillNodeIPsResponse = new BackfillNodeIPsResponse$Type();
